import React, { useState, useEffect } from 'react';
import PizZip from 'pizzip';
import Docxtemplater from 'docxtemplater';
import { saveAs } from 'file-saver';
import './AppStyled.css';
import { Login,Register,SaveData } from './registrForms';
import {UserList} from './Outalldata'

import template_0 from './templates/0 - Punomoc za DOO i Odluku/1.docx';
import template_1_0 from './templates/1_0 - Godišnja ponuda produženje/1.docx';
import template_1_1 from './templates/1_1 - Godišnja ponuda prvi/1.docx';
import template_1_2 from './templates/1_2 - Izjava za platu director/1.docx';
import template_1_3 from './templates/1_3 - Izjava za platu porodica/1.docx';
import template_1_4 from './templates/1_4 -  Zahtjev porezko uverenje/1.docx';
import template_1_5 from './templates/1_5 - Zahtjev_radna_knjizica/1.docx';

import template_2_0 from './templates/2_0 - Fond za zdravstveno osiguranje/1.docx';
import template_2_1 from './templates/2_1 - JPR/1.docx';                                                            
import template_2_2 from './templates/2_2 - Ovlašenje za porezku/1.docx';
import template_2_3 from './templates/2_3 - Ugovor o radu/1.docx';
import template_2_4 from './templates/2_4 - Ugovor o radu Budva/1.docx';
import template_2_5 from './templates/2_5 - Zahtjev na izvod iz CRPS-a/1.docx';

import template_3_0 from './templates/3_0 - Ovlaščenje za poštu/1.docx';
import template_3_1 from './templates/3_1 - Zahtjev za fiskalizaciju/1.docx';                                                                                                  
import template_3_2_1 from './templates/3_2 - Zahtjev za token/Шаблон Ovlaščenje za poštu.docx';                        
import template_3_2_2 from './templates/3_2 - Zahtjev za token/Шаблон Zahtjev za token za prijave.docx';              
import template_3_3 from './templates/3_3 - Otvaranje racuna zahtjev FL Lovcen/1.docx';                               
import template_3_4 from './templates/3_4 - Zahtjev za otvaranje računa PL sve Lovcen/1.docx';                        


import template_4_0 from './templates/4_0 - Izjava za raskid ugovora o radu/1.docx';
import template_4_1 from './templates/4_1 - Otkaz ugovora o radu/1.docx';
import template_4_2 from './templates/4_2 - Sporazum o prestanku radnog odnosa/1.docx';

import template_5_0 from './templates/5_0 - Pozajmica/1.docx';
import template_5_1 from './templates/5_1 - Token punomoć/1.docx';
import template_5_2 from './templates/5_2 - Virmani/1.docx';
import template_5_3 from './templates/5_3 - Zahtjev na poresko uverenje/1.docx';

import template_6_0 from './templates/6_0 - Izjava likvidacija/1.docx';
import template_6_1 from './templates/6_1 - Punomoć likvidacija/1.docx';

const templateNames: { [key: string]: string } = {
  template_0:'Punomoc za DOO i Odluku',
  template_1_0:'1_0 - Godišnja ponuda produženje',
  template_1_1:'1_1 - Godišnja ponuda prvi',
  template_1_2:'1_2 - Izjava za platu director',
  template_1_3:'1_3 - Izjava za platu porodica',
  template_1_4:'1_4 -  Zahtjev porezko uverenje',
  template_1_5:'1_5 - Zahtjev_radna_knjizica',
  template_2_0:'2_0 - Fond za zdravstveno osiguranje',
  template_2_1:'2_1 - JPR',
  template_2_2:'2_2 - Ovlašenje za porezku',
  template_2_3:'2_3 - Ugovor o radu',
  template_2_4:'2_4 - Ugovor o radu Budva',
  template_2_5:'2_5 - Zahtjev na izvod iz CRPS-a',
  template_3_0:'3_0 - Ovlaščenje za poštu',
  template_3_1:'3_1 - Zahtjev za fiskalizaciju',
  template_3_2_1:'3_2_1 - Zahtjev za token/Шаблон Ovlaščenje za poštu',
  template_3_2_2:'3_2_2 - Zahtjev za token/Шаблон Ovlaščenje za poštu',
/*   template_3_3:'3_3 - Otvaranje racuna zahtjev FL Lovcen', */
  template_3_4:'3_4 - Zahtjev za otvaranje računa PL sve Lovcen',
  template_4_0:'4_0 - Izjava za raskid ugovora o radu',
  template_4_1:'4_1 - Otkaz ugovora o radu',
  template_4_2:'4_2 - Sporazum o prestanku radnog odnosa',
  template_5_0:'5_0 - Pozajmica',
  template_5_1:'5_1 - Token punomoć',
  template_5_2:'5_2 - Virmani',
  template_5_3:'5_3 - Zahtjev na poresko uverenje',
  template_6_0:'6_0 - Izjava likvidacija',
  template_6_1:'6_1 - Punomoć likvidacija',
}

const templates: { [key: string]: string } = {
  template_0,
  template_1_0,
  template_1_1,
  template_1_2,
  template_1_3,
  template_1_4,
  template_1_5,
  template_2_0,
  template_2_1,
  template_2_2,
  template_2_3,
  template_2_4,
  template_2_5,
  template_3_0,
  template_3_1,
  template_3_2_1,
  template_3_2_2,
/*   template_3_3, */
  template_3_4,
  template_4_0,
  template_4_1,
  template_4_2,
  template_5_0,
  template_5_1,
  template_5_2,
  template_5_3,
  template_6_0,
  template_6_1,
}

export interface FormData {
  name: string;
  surName: string;
  fathName: string;
  birthDate: string;
  bd1: string;
  bd2: string;
  bd3: string;
  bd4: string;
  bd5: string;
  bd6: string;
  bd7: string;
  bd8: string;
  male: string; 
  female: string;
  tel: string;
  email: string;
  address: string;
  city:string;
  workBookNum: string;
      // ещё много переменных
  f11_3: string;
  f21_3: string;
  f31_3: string;
  f41_3: string;
  f51_3: string;
}

const App: React.FC = () => {
  const [data, setData] = useState<FormData>({
      name: ' ',
      surName: ' ',
      fathName: ' ',
      birthDate: ' ',
      bd1: ' ',
      bd2: ' ',
      bd3: ' ',
      bd4: ' ',
      bd5: ' ',
      bd6: ' ',
      bd7: ' ',
      bd8: ' ',
      male: ' ',
      female: ' ',
      tel: ' ',
      email: ' ',
      address: ' ',
      city:' ',
      workBookNum: ' ',
      // остальные переменные из интерфейса 
      f11_3: '  ',
      f21_3: '  ',
      f31_3: '  ',
      f41_3: '  ',
      f51_3: '  ',
    });

  const [selectedTemplate, setSelectedTemplate] = useState<string>('');
  const [requiredFields, setRequiredFields] = useState<string[]>([]);


  const handleSplitAndSet = (name:string,value:string,keys:string[])=> {
    const dateDigit = value.replace(/[^0-9]/g, '');
    const newValues: {[key:string]:string}={};

    keys.forEach((key,index) => {
      newValues[key]=dateDigit[index] || '';
    });
    setData(prevData => ({
      ...prevData,
      ...newValues, // добавляем новые значения в состояние
    }));

  }


  const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = event.target;
    {setData(prevData => ({
      ...prevData, 
      [name]: value,
    })
  );}
  };

  const handleGenderChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name } = event.target;
  
    setData(prevData => ({
      ...prevData,
      male: name === 'male' ? 'V' : '-',  
      female: name === 'female' ? 'V' : '-',
    }));
  };
  



  const handleTemplateChange = async (event: React.ChangeEvent<HTMLSelectElement>) => {

    const templateKey = event.target.value;
    setSelectedTemplate(templateKey);

    const templateFile = templates[templateKey];
    if (!templateFile) return;

    const response = await fetch(templateFile);
    const content = await response.arrayBuffer();

    const zip = new PizZip(content);
    const doc = new Docxtemplater(zip, { paragraphLoop: true, linebreaks: true });

    const text = doc.getFullText();
    const matches = text.match(/\{(.*?)\}/g) || [];
    const fields = matches.map(match => match.replace(/[{}]/g, ''));

    setRequiredFields(fields);
  };


  const generateDocument = async () => {

    if (selectedTemplate==='template_1_3'){
      console.log('work temolate_1_3')

      if(data.famName1!=' '){
        setData(prevdata=>({
          ...prevdata,
          f11_3:', putna isprava P RUS '
        }))
      }
      if(data.famName2!==' '){
        setData(prevdata=>({
          ...prevdata,
          f21_3:', putna isprava P RUS '
        }))
      }
      if(data.famName3!==' '){
        setData(prevdata=>({
          ...prevdata,
          f31_3:', putna isprava P RUS '
        }))
      }
      if(data.famName4!==' '){
        setData(prevdata=>({
          ...prevdata,
          f41_3:', putna isprava P RUS '
        }))
      }
      if(data.famName5!==' '){

        setData(prevdata=>({
          ...prevdata,
          f51_3:', putna isprava P RUS '
        }))
      }

    }
    console.log(' famName1:',data.famName1,'end')
    console.log(' famName2:',data.famName2,'end')
    console.log(' famName3:',data.famName3,'end')
    console.log(' famName4:',data.famName4,'end')
    console.log(' famName5:',data.famName5,'end')
    console.log(' f11_3:',data.f11_3,'end')
    console.log(' f21_3:',data.f21_3,'end')
    console.log(' f31_3:',data.f31_3,'end')
    console.log(' f41_3:',data.f41_3,'end')
    console.log(' f51_3:',data.f51_3,'end')

    const templateFile = templates[selectedTemplate];
    console.log(selectedTemplate)
    if (!templateFile) return;

    const response = await fetch(templateFile);
    const content = await response.arrayBuffer();

    const zip = new PizZip(content);
    const doc = new Docxtemplater(zip, { paragraphLoop: true, linebreaks: true });
    

    doc.render(data);

    const out = doc.getZip().generate({
      type: 'blob',
      mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    });

    saveAs(out, `${selectedTemplate}_document.docx`);
  };

  const isFieldRequired = (fieldName: string) => requiredFields.includes(fieldName);
  

  const [showAppComp, setShowAppComp] = useState(false);
  const handleUserDataUpdate = (userData: any) => {

    console.log('UserData received:', userData); // Логирование данных
        setData(userData);
  
        if (userData.id === 1) {
          setShowAppComp(true);
        } else {
          setShowAppComp(false);
        }

    // Применяем разбивку для нужных полей, как если бы их вводили вручную
    if (userData.birthDate) {
      handleSplitAndSet('birthDate', userData.birthDate, ['bd1', 'bd2', 'bd3', 'bd4', 'bd5', 'bd6', 'bd7', 'bd8']);
    }
    if (userData.jmbgNum) {
      handleSplitAndSet('jmbgNum', userData.jmbgNum, ['j1', 'j2', 'j3', 'j4', 'j5', 'j6', 'j7', 'j8', 'j9', 'j10', 'j11', 'j12', 'j13']);
    }
    if (userData.jmbgFrom) {
      handleSplitAndSet('jmbgFrom', userData.jmbgFrom, ['jf1', 'jf2', 'jf3', 'jf4', 'jf5', 'jf6', 'jf7', 'jf8']);
    }
    if (userData.compRegDate) {
      handleSplitAndSet('compRegDate', userData.compRegDate, ['rd1', 'rd2', 'rd3', 'rd4', 'rd5', 'rd6', 'rd7', 'rd8']);
    }
    if (userData.famJmbgNum1) {
      handleSplitAndSet('famJmbgNum1', userData.famJmbgNum1, ['f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f110', 'f111', 'f112', 'f113']);
    }
    if (userData.famJmbgNum2) {
      handleSplitAndSet('famJmbgNum2', userData.famJmbgNum2, ['f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f210', 'f211', 'f212', 'f213']);
    }
    if (userData.famJmbgNum3) {
      handleSplitAndSet('famJmbgNum3', userData.famJmbgNum3, ['f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37', 'f38', 'f39', 'f310', 'f311', 'f312', 'f313']);
    }
    if (userData.famJmbgNum4) {
      handleSplitAndSet('famJmbgNum4', userData.famJmbgNum4, ['f41', 'f42', 'f43', 'f44', 'f45', 'f46', 'f47', 'f48', 'f49', 'f410', 'f411', 'f412', 'f413']);
    }
    if (userData.famJmbgNum5) {
      handleSplitAndSet('famJmbgNum5', userData.famJmbgNum5, ['f51', 'f52', 'f53', 'f54', 'f55', 'f56', 'f57', 'f58', 'f59', 'f510', 'f511', 'f512', 'f513']);
    }
    console.log(data)
  };

 
/*   
  const updateState = (userData: any) => {
    setData(data);
    if (userData.id === 2) {
      setShowAppComp(true);
    } else {
      setShowAppComp(false);
    }
  }; */


  return (
    <div className="App">
      <header className="App-header">
        <h1>Document Generator</h1>
      </header>
      <main>
      <>
      {/* <h1>HEEH ITS WORK</h1> */}
      </>

      <div id='headButtons'>
      <div>
          <label>Выберите шаблон:</label>
          <select value={selectedTemplate} onChange={handleTemplateChange} className='selectForm'>
            {Object.keys(templates).map(key => (
              <option key={key} value={key} className='option'>
                {templateNames[key]}
              </option>
            ))}
          </select>
        </div>
        
        <div id='authBlick'>
{/*           <button>регистрация</button>
          <button>авторизация</button> */}
          <Register/>
          <Login updateState={handleUserDataUpdate} />
          {/* <button>заполнить мои данные</button> */}
          <SaveData userData={data} setUserData={setData} />
        </div>

        <div>
          
        </div>
      </div>
      
        <div>
        <form className='FormStyle'>


        <label>Имя</label>
      <input 
        type="text" 
        name="name" 
        value={data.name} 
        onChange={handleChange} 
        className={isFieldRequired('name') ? 'highlight' : ''}
      />
      <label>Фамилия</label>
      <input 
        type="text" 
        name="surName" 
        value={data.surName} 
        onChange={handleChange} 
        className={isFieldRequired('surName') ? 'highlight' : ''}
      />
      <label>Имя Отца</label>
      <input 
        type="text" 
        name="fathName" 
        value={data.fathName} 
        onChange={handleChange} 
        className={isFieldRequired('fathName') ? 'highlight' : ''}
      />


      <label>Пол</label>
      <div>
        <label>
          <input
            type="checkbox"
            name="male"
            checked={data.male === 'V'}
            onChange={handleGenderChange}
          />
          Мужской
        </label>
        <label>
          <input
            type="checkbox"
            name="female"
            checked={data.female === 'V'}
            onChange={handleGenderChange}
          />
          Женский
        </label>
      </div>


<label>Дата Рождения</label>
<input 
  type="date" 
  name="birthDate" 
  value={data.birthDate} 
  onChange={handleChange} 
  className={isFieldRequired('birthDate') ? 'highlight' : ''} 
/>

<label>Телефон</label>
<input 
  type="tel" 
  name="tel" 
  value={data.tel} 
  onChange={handleChange} 
  className={isFieldRequired('tel') ? 'highlight' : ''} 
/>

<label>Email</label>
<input 
  type="email" 
  name="email" 
  value={data.email} 
  onChange={handleChange} 
  className={isFieldRequired('email') ? 'highlight' : ''} 
/>

<label>Адрес</label>
<input 
  type="text" 
  name="address" 
  value={data.address} 
  onChange={handleChange} 
  className={isFieldRequired('address') ? 'highlight' : ''} 
/>


<label>Ваш город(Населённый пункт для почты)</label>
<input 
  type="text" 
  name="city" 
  value={data.city} 
  onChange={handleChange} 
  className={isFieldRequired('city') ? 'highlight' : ''} 
/>


<label>Номер Трудовой Книжки</label>
<input 
  type="text" 
  name="workBookNum" 
  value={data.workBookNum} 
  onChange={handleChange} 
  className={isFieldRequired('workBookNum') ? 'highlight' : ''} 
/>

// и все остальные поля для заполнения

        </form>
        </div>
        {selectedTemplate && (
          <button id='ButtonGenerate' onClick={generateDocument}>Preuzmi dokument</button>
        )}
      </main>
      {showAppComp && <UserList onUserSelect={(userData)=>handleUserDataUpdate(userData)}/>}
    </div>
  );
};

export default App;
